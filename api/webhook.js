const { Telegraf, Markup } = require('telegraf');
const OpenAI = require('openai');

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const bot   = new Telegraf(process.env.TELEGRAM_TOKEN);
const channelId = process.env.CHANNEL_ID;
const adminId   = Number(process.env.ADMIN_ID);

/* ---------- —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ---------- */
const pending   = new Map(); // key ‚Üí {type, fileId, caption, voiceText?}
const cooldown  = new Map(); // userId ‚Üí timestamp
const banned    = new Set();
const stats     = { total: 0, published: 0, rejected: 0 };

/* ---------- helpers ---------- */
const RATE_LIMIT_MS = 5000;

function isAdmin(id) { return id === adminId; }
function isCool(id) {
  const now = Date.now();
  const last = cooldown.get(id);
  if (last && now - last < RATE_LIMIT_MS) return false;
  cooldown.set(id, now);
  return true;
}

/* ---------- —Å—Ç–∞—Ä—Ç ---------- */
bot.start(ctx => ctx.reply('–ü—Ä–∏—Å—ã–ª–∞–π –º—ã—Å–ª—å ‚Äì —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –≥–æ–ª–æ—Å!'));

/* ---------- rate-limit + ban ---------- */
bot.use((ctx, next) => {
  if (!ctx.message) return next();
  if (banned.has(ctx.from.id)) return;
  if (!isCool(ctx.from.id)) {
    return ctx.reply('‚èé –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥.');
  }
  return next();
});

/* ---------- —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ ---------- */
async function stt(fileLink) {
  try {
    const resp = await openai.audio.transcriptions.create({
      file: fileLink,
      model: 'whisper-1',
      language: 'ru'
    });
    return resp.text.trim();
  } catch (e) {
    console.error('Whisper error:', e);
    return '<–æ—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è>';
  }
}

/* ---------- forward to admin (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ) ---------- */
async function forwardToAdmin(type, fileId, caption, userMsgId, userId, voiceText = null) {
  const key = `${userMsgId}_${userId}`;
  const kb = Markup.inlineKeyboard([
    [Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `pub_${key}`),
     Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `rej_${key}`),
     Markup.button.callback('‚úèÔ∏è –ü—Ä–∞–≤–∏—Ç—å', `edit_${key}`)]
  ]);

  let header = `–ù–æ–≤–∞—è –º—ã—Å–ª—å #id${key}:\n\n`;
  if (voiceText) header += `üéô –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: ${voiceText}\n\n`;
  if (caption) header += `–ü–æ–¥–ø–∏—Å—å: ${caption}\n\n`;

  if (type === 'text') {
    await bot.telegram.sendMessage(adminId, header, kb);
  } else if (type === 'photo') {
    await bot.telegram.sendPhoto(adminId, fileId, {caption: header, ...kb});
  } else if (type === 'video') {
    await bot.telegram.sendVideo(adminId, fileId, {caption: header, ...kb});
  } else if (type === 'document') {
    await bot.telegram.sendDocument(adminId, fileId, {caption: header, ...kb});
  } else if (type === 'voice') {
    await bot.telegram.sendMessage(adminId, header + '(–≥–æ–ª–æ—Å–æ–≤–æ–µ –Ω–∏–∂–µ)', kb);
    await bot.telegram.sendVoice(adminId, fileId); // –ø—Ä–∏—à–ª—ë–º –æ—Ä–∏–≥–∏–Ω–∞–ª –Ω–∏–∂–µ —Ç–µ–∫—Å—Ç–∞
  }

  pending.set(key, {type, fileId, caption, voiceText});
}

/* ---------- –ø—Ä–∏—ë–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---------- */
bot.on('text', async ctx => {
  const txt = ctx.message.text;
  await ctx.reply('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–≤–æ—è –º—ã—Å–ª—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ.');
  await forwardToAdmin('text', null, txt, ctx.message.message_id, ctx.from.id);
});

bot.on('photo', async ctx => {
  const fileId = ctx.message.photo.at(-1).file_id;
  const cap = ctx.message.caption || '';
  await ctx.reply('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–≤–æ—è –º—ã—Å–ª—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ.');
  await forwardToAdmin('photo', fileId, cap, ctx.message.message_id, ctx.from.id);
});

bot.on('video', async ctx => {
  const fileId = ctx.message.video.file_id;
  const cap = ctx.message.caption || '';
  await ctx.reply('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–≤–æ—è –º—ã—Å–ª—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ.');
  await forwardToAdmin('video', fileId, cap, ctx.message.message_id, ctx.from.id);
});

bot.on('document', async ctx => {
  const fileId = ctx.message.document.file_id;
  const cap = ctx.message.caption || '';
  await ctx.reply('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–≤–æ—è –º—ã—Å–ª—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ.');
  await forwardToAdmin('document', fileId, cap, ctx.message.message_id, ctx.from.id);
});

/* ---------- –≥–æ–ª–æ—Å–æ–≤—ã–µ ---------- */
bot.on('voice', async ctx => {
  const fileId = ctx.message.voice.file_id;
  const cap = ctx.message.caption || '';

  await ctx.reply('üéô –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –≥–æ–ª–æ—Å...');

  // —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
  const fileLink = await bot.telegram.getFileLink(fileId);
  const voiceText = await stt(fileLink.href);

  await ctx.reply('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–≤–æ—è –º—ã—Å–ª—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ.');
  await forwardToAdmin('voice', fileId, cap, ctx.message.message_id, ctx.from.id, voiceText);
});

/* ---------- –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ ---------- */
bot.action(/^pub_(.+)/, async ctx => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –ø—Ä–∞–≤');
  const p = pending.get(ctx.match[1]);
  if (!p) return ctx.answerCbQuery('–£—Å—Ç–∞—Ä–µ–ª–æ');

  try {
    if (p.type === 'text')        await bot.telegram.sendMessage(channelId, p.voiceText || p.caption);
    else if (p.type === 'photo')  await bot.telegram.sendPhoto(channelId, p.fileId, {caption: p.caption});
    else if (p.type === 'video')  await bot.telegram.sendVideo(channelId, p.fileId, {caption: p.caption});
    else if (p.type === 'document') await bot.telegram.sendDocument(channelId, p.fileId, {caption: p.caption});
    else if (p.type === 'voice')  await bot.telegram.sendMessage(channelId, p.voiceText);
    stats.published++;
  } catch (e) {
    console.error(e);
    return ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
  }

  pending.delete(ctx.match[1]);
  stats.total++;
  await ctx.answerCbQuery('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ');
  await ctx.editMessageReplyMarkup({inline_keyboard: []});
});

bot.action(/^rej_(.+)/, async ctx => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –ø—Ä–∞–≤');
  pending.delete(ctx.match[1]);
  stats.rejected++;
  await ctx.answerCbQuery('‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ');
  await ctx.editMessageReplyMarkup({inline_keyboard: []});
});

/* ---------- –ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ ---------- */
bot.action(/^edit_(.+)/, async ctx => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –ø—Ä–∞–≤');
  const p = pending.get(ctx.match[1]);
  if (!p) return ctx.answerCbQuery('–£—Å—Ç–∞—Ä–µ–ª–æ');

  // –ø—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
  ctx.answerCbQuery('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.');
  // —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥: –æ–∂–∏–¥–∞–µ–º –ø—Ä–∞–≤–∫—É –æ—Ç –∞–¥–º–∏–Ω–∞
  bot.ctx = bot.ctx || {};
  bot.ctx.awaitEdit = { key: ctx.match[1], chatId: ctx.chat.id, msgId: ctx.callbackQuery.message.message_id };
});

bot.on('text', async ctx => {
  // –µ—Å–ª–∏ –∞–¥–º–∏–Ω –ø—Ä–∏—Å–ª–∞–ª –ø—Ä–∞–≤–∫—É ‚Äì –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
  const ae = bot.ctx?.awaitEdit;
  if (ae && ctx.chat.id === adminId) {
    const p = pending.get(ae.key);
    if (!p) return; // —É—Å—Ç–∞—Ä–µ–ª–æ
    p.voiceText = ctx.message.text; // –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await bot.telegram.editMessageText(ae.chatId, ae.msgId, null,
      `‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:\n\n${ctx.message.text}`, Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `pub_${ae.key}`),
         Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `rej_${ae.key}`)]
      ]));
    delete bot.ctx.awaitEdit;
    return;
  }

  // –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äì –º–æ–¥–µ—Ä–∞—Ü–∏—è
  const txt = ctx.message.text;
  await ctx.reply('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–≤–æ—è –º—ã—Å–ª—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ.');
  await forwardToAdmin('text', null, txt, ctx.message.message_id, ctx.from.id);
});

/* ---------- –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ ---------- */
bot.command('stats', ctx => {
  if (!isAdmin(ctx.from.id)) return;
  ctx.reply(
    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
    `–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${stats.published}\n` +
    `–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${stats.rejected}\n` +
    `–í –±–∞–Ω–µ: ${banned.size}`
  );
});

bot.command('ban', async ctx => {
  if (!isAdmin(ctx.from.id)) return;
  const tgt = ctx.message.reply_to_message?.from?.id;
  if (!tgt) return ctx.reply('–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è.');
  banned.add(tgt);
  ctx.reply('üö´ –ó–∞–±–∞–Ω–µ–Ω.');
});

bot.command('unban', async ctx => {
  if (!isAdmin(ctx.from.id)) return;
  const tgt = ctx.message.reply_to_message?.from?.id;
  if (!tgt) return ctx.reply('–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
  banned.delete(tgt);
  ctx.reply('‚úÖ –†–∞–∑–±–∞–Ω–µ–Ω.');
});

/* ---------- serverless entry ---------- */
module.exports = (req, res) => {
  if (req.method !== 'POST') return res.status(405).send('Method Not Allowed');
  return bot.webhookCallback(`/webhook/${process.env.TELEGRAM_TOKEN}`)(req, res);
};
