const { Telegraf, Markup } = require('telegraf');
const bot = new Telegraf(process.env.TELEGRAM_TOKEN);
const channelId = process.env.CHANNEL_ID;
const adminId   = Number(process.env.ADMIN_ID);   // –≤–∞—à–∞ —Ü–∏—Ñ—Ä–∞

const pending = new Map(); // id ‚Üí {msg, type, fileId, caption}

bot.start(ctx => ctx.reply('–û—Ç–ø—Ä–∞–≤—å anything ‚Üí —Å–Ω–∞—á–∞–ª–∞ –∞–¥–º–∏–Ω—É, –ø–æ—Ç–æ–º –≤ –∫–∞–Ω–∞–ª.'));

async function sendToAdmin(type, fileId, caption, fromId) {
  const kb = Markup.inlineKeyboard([
    [Markup.button.callback('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å',   `pub_${fromId}`),
     Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',     `rej_${fromId}`)]
  ]);
  if (type === 'text')        await bot.telegram.sendMessage(adminId, `–¢–µ–∫—Å—Ç:\n${caption}`, kb);
  else if (type === 'photo')  await bot.telegram.sendPhoto(adminId, fileId, {caption: `–§–æ—Ç–æ:\n${caption}`, ...kb});
  else if (type === 'video')  await bot.telegram.sendVideo(adminId, fileId, {caption: `–í–∏–¥–µ–æ:\n${caption}`, ...kb});
  else if (type === 'doc')    await bot.telegram.sendDocument(adminId, fileId, {caption: `–§–∞–π–ª:\n${caption}`, ...kb});
}

bot.on('text', ctx => {
  const id = ctx.message.message_id;
  pending.set(id, {type:'text', fileId:null, caption:ctx.message.text});
  sendToAdmin('text', null, ctx.message.text, id);
  ctx.reply('‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.');
});
bot.on('photo', ctx => {
  const id = ctx.message.message_id;
  pending.set(id, {type:'photo', fileId:ctx.message.photo.at(-1).file_id, caption:ctx.message.caption||''});
  sendToAdmin('photo', ctx.message.photo.at(-1).file_id, ctx.message.caption||'', id);
  ctx.reply('‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.');
});
// —Ç–æ –∂–µ –¥–ª—è video, document (–∫–æ–ø–∏—Ä—É–µ—Ç–µ –ª–æ–≥–∏–∫—É)

bot.action(/^pub_(.+)/, async ctx => {
  const msgId = Number(ctx.match[1]);
  const p = pending.get(msgId);
  if (!p) return ctx.answerCbQuery('–£—Å—Ç–∞—Ä–µ–ª–æ');
  if (p.type === 'text')        await bot.telegram.sendMessage(channelId, p.caption);
  else if (p.type === 'photo')  await bot.telegram.sendPhoto(channelId, p.fileId, {caption:p.caption});
  else if (p.type === 'video')  await bot.telegram.sendVideo(channelId, p.fileId, {caption:p.caption});
  else if (p.type === 'doc')    await bot.telegram.sendDocument(channelId, p.fileId, {caption:p.caption});
  pending.delete(msgId);
  await ctx.answerCbQuery('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ');
  await ctx.editMessageReplyMarkup({inline_keyboard:[]});
});
bot.action(/^rej_(.+)/, async ctx => {
  pending.delete(Number(ctx.match[1]));
  await ctx.answerCbQuery('‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ');
  await ctx.editMessageReplyMarkup({inline_keyboard:[]});
});

module.exports = (req,res) => {
  if (req.method !== 'POST') return res.status(405).send('Method Not Allowed');
  return bot.webhookCallback(`/webhook/${process.env.TELEGRAM_TOKEN}`)(req,res);
};
let lastMsgId = null;   // message_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ

// –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
bot.action(/^pub_(.+)/, async ctx => {
  ...–ø—É–±–ª–∏–∫–∞—Ü–∏—è...
  const sent = await bot.telegram.sendMessage(channelId, p.caption); // –∏–ª–∏ sendPhoto –∏ —Ç.–¥.
  lastMsgId = sent.message_id;
  ...
});

bot.command('del', async ctx => {
  if (ctx.from.id !== adminId) return;
  if (!lastMsgId) return ctx.reply('–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
  try {
    await bot.telegram.deleteMessage(channelId, lastMsgId);
    lastMsgId = null;
    ctx.reply('üóë –£–¥–∞–ª–µ–Ω–æ.');
  } catch (e) {
    ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å (—Å—Ç–∞—Ä—à–µ 48 —á –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç).');
  }
});
const stats = { total: 0, banned: new Set() };

bot.use((ctx, next) => {
  if (stats.banned.has(ctx.from.id)) return;   // –∏–≥–Ω–æ—Ä–∏–º –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö
  return next();
});

bot.on('text', ctx => {
  stats.total++;
  ...–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥...
});

bot.command('stats', ctx => {
  if (ctx.from.id !== adminId) return;
  ctx.reply(`üìä –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${stats.total}\nüö´ –í –±–∞–Ω–µ: ${stats.banned.size} —á–µ–ª.`);
});

bot.command('ban', ctx => {
  if (ctx.from.id !== adminId) return;
  const tgt = ctx.message.reply_to_message?.from?.id;
  if (!tgt) return ctx.reply('–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è.');
  stats.banned.add(tgt);
  ctx.reply('üö´ –ó–∞–±–∞–Ω–µ–Ω.');
});

bot.command('unban', ctx => {
  if (ctx.from.id !== adminId) return;
  const tgt = ctx.message.reply_to_message?.from?.id;
  if (!tgt) return ctx.reply('–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
  stats.banned.delete(tgt);
  ctx.reply('‚úÖ –†–∞–∑–±–∞–Ω–µ–Ω.');
});
const cooldown = new Map();

function rateLimit(ctx, next) {
  const now = Date.now();
  const uid = ctx.from.id;
  if (cooldown.has(uid) && now - cooldown.get(uid) < 5000)
    return ctx.reply('‚èé –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫.');
  cooldown.set(uid, now);
  return next();
}
bot.use(rateLimit);
