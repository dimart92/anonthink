// api/webhook.js
const { Telegraf, Markup } = require('telegraf');

const bot   = new Telegraf(process.env.TELEGRAM_TOKEN);
const channelId = process.env.CHANNEL_ID;
const adminId   = Number(process.env.ADMIN_ID);

/* ---------- —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ---------- */
const pending   = new Map(); // userMsgId ‚Üí {type, fileId, caption}
const cooldown  = new Map(); // userId ‚Üí timestamp
const banned    = new Set(); // Set<number>  (persist —á–µ—Ä–µ–∑ env –Ω–µ –¥–µ–ª–∞–µ–º –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
const stats     = { total: 0, published: 0, rejected: 0 };

/* ---------- helpers ---------- */
const RATE_LIMIT_MS = 5000; // 5 —Å–µ–∫—É–Ω–¥

function isAdmin(id) { return id === adminId; }

function isCool(id) {
  const now = Date.now();
  const last = cooldown.get(id);
  if (last && now - last < RATE_LIMIT_MS) return false;
  cooldown.set(id, now);
  return true;
}

/* ---------- —Å—Ç–∞—Ä—Ç ---------- */
bot.start(ctx => ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —á—Ç–æ –Ω–∞ –¥—É—à–µ'));

/* ---------- rate-limit + ban ---------- */
bot.use((ctx, next) => {
  if (!ctx.message) return next(); // —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (banned.has(ctx.from.id)) return; // —Ç–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏–º
  if (!isCool(ctx.from.id)) {
    return ctx.reply('‚èé –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.');
  }
  return next();
});

/* ---------- –ø—Ä–∏—ë–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---------- */
async function forwardToAdmin(type, fileId, caption, userMsgId, userId) {
  const key = `${userMsgId}_${userId}`;
  const kb = Markup.inlineKeyboard([
    [Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `pub_${key}`),
     Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `rej_${key}`)]
  ]);

  const header = `–ù–æ–≤–∞—è –º—ã—Å–ª—å #id${key}:\n\n`;
  if (type === 'text') {
    await bot.telegram.sendMessage(adminId, header + caption, kb);
  } else if (type === 'photo') {
    await bot.telegram.sendPhoto(adminId, fileId, {caption: header + caption, ...kb});
  } else if (type === 'video') {
    await bot.telegram.sendVideo(adminId, fileId, {caption: header + caption, ...kb});
  } else if (type === 'document') {
    await bot.telegram.sendDocument(adminId, fileId, {caption: header + caption, ...kb});
  }
  pending.set(key, {type, fileId, caption});
}

bot.on('text', async ctx => {
  const txt = ctx.message.text;
  await ctx.reply('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–≤–æ—è –º—ã—Å–ª—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ');
  await forwardToAdmin('text', null, txt, ctx.message.message_id, ctx.from.id);
});

bot.on('photo', async ctx => {
  const fileId = ctx.message.photo.at(-1).file_id;
  const cap = ctx.message.caption || '';
  await ctx.reply('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–≤–æ—è –º—ã—Å–ª—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ.');
  await forwardToAdmin('photo', fileId, cap, ctx.message.message_id, ctx.from.id);
});

bot.on('video', async ctx => {
  const fileId = ctx.message.video.file_id;
  const cap = ctx.message.caption || '';
  await ctx.reply('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–≤–æ—è –º—ã—Å–ª—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ.');
  await forwardToAdmin('video', fileId, cap, ctx.message.message_id, ctx.from.id);
});

bot.on('document', async ctx => {
  const fileId = ctx.message.document.file_id;
  const cap = ctx.message.caption || '';
  await ctx.reply('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–≤–æ—è –º—ã—Å–ª—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ.');
  await forwardToAdmin('document', fileId, cap, ctx.message.message_id, ctx.from.id);
});

/* ---------- –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ ---------- */
bot.action(/^pub_(.+)/, async ctx => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –ø—Ä–∞–≤');
  const p = pending.get(ctx.match[1]);
  if (!p) return ctx.answerCbQuery('–£—Å—Ç–∞—Ä–µ–ª–æ');

  try {
    if (p.type === 'text')        await bot.telegram.sendMessage(channelId, p.caption);
    else if (p.type === 'photo')  await bot.telegram.sendPhoto(channelId, p.fileId, {caption: p.caption});
    else if (p.type === 'video')  await bot.telegram.sendVideo(channelId, p.fileId, {caption: p.caption});
    else if (p.type === 'document') await bot.telegram.sendDocument(channelId, p.fileId, {caption: p.caption});
    stats.published++;
  } catch (e) {
    console.error(e);
    return ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
  }

  pending.delete(ctx.match[1]);
  stats.total++;
  await ctx.answerCbQuery('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ');
  await ctx.editMessageReplyMarkup({inline_keyboard: []});
});

bot.action(/^rej_(.+)/, async ctx => {
  if (!isAdmin(ctx.from.id)) return ctx.answerCbQuery('–ù–µ—Ç –ø—Ä–∞–≤');
  pending.delete(ctx.match[1]);
  stats.rejected++;
  await ctx.answerCbQuery('‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ');
  await ctx.editMessageReplyMarkup({inline_keyboard: []});
});

/* ---------- –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ ---------- */
bot.command('stats', ctx => {
  if (!isAdmin(ctx.from.id)) return;
  ctx.reply(
    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n` +
    `–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.total + stats.published + stats.rejected}\n` +
    `–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${stats.published}\n` +
    `–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${stats.rejected}\n` +
    `–í –±–∞–Ω–µ: ${banned.size} —á–µ–ª.`
  );
});

bot.command('ban', async ctx => {
  if (!isAdmin(ctx.from.id)) return;
  const tgt = ctx.message.reply_to_message?.from?.id;
  if (!tgt) return ctx.reply('–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è.');
  banned.add(tgt);
  ctx.reply('üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.');
});

bot.command('unban', async ctx => {
  if (!isAdmin(ctx.from.id)) return;
  const tgt = ctx.message.reply_to_message?.from?.id;
  if (!tgt) return ctx.reply('–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
  banned.delete(tgt);
  ctx.reply('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.');
});

/* ---------- serverless entry ---------- */
module.exports = (req, res) => {
  if (req.method !== 'POST') return res.status(405).send('Method Not Allowed');
  return bot.webhookCallback(`/webhook/${process.env.TELEGRAM_TOKEN}`)(req, res);
};
